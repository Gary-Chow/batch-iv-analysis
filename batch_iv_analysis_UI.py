# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'batch-iv-analysis.ui'
#
# Created by: PyQt5 UI code generator 5.5.1
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_batch_iv_analysis(object):
    def setupUi(self, batch_iv_analysis):
        batch_iv_analysis.setObjectName("batch_iv_analysis")
        batch_iv_analysis.resize(1238, 588)
        self.centralwidget = QtWidgets.QWidget(batch_iv_analysis)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableWidget.setAlternatingRowColors(True)
        self.tableWidget.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.tableWidget.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectItems)
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setRowCount(0)
        self.tableWidget.horizontalHeader().setCascadingSectionResizes(False)
        self.tableWidget.horizontalHeader().setDefaultSectionSize(92)
        self.tableWidget.horizontalHeader().setSortIndicatorShown(True)
        self.tableWidget.verticalHeader().setVisible(False)
        self.tableWidget.verticalHeader().setDefaultSectionSize(30)
        self.tableWidget.verticalHeader().setSortIndicatorShown(True)
        self.gridLayout.addWidget(self.tableWidget, 0, 0, 1, 1)
        batch_iv_analysis.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(batch_iv_analysis)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1238, 28))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuTools = QtWidgets.QMenu(self.menubar)
        self.menuTools.setObjectName("menuTools")
        batch_iv_analysis.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(batch_iv_analysis)
        self.statusbar.setObjectName("statusbar")
        batch_iv_analysis.setStatusBar(self.statusbar)
        self.actionQuit = QtWidgets.QAction(batch_iv_analysis)
        self.actionQuit.setObjectName("actionQuit")
        self.actionOpen = QtWidgets.QAction(batch_iv_analysis)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSave = QtWidgets.QAction(batch_iv_analysis)
        self.actionSave.setObjectName("actionSave")
        self.actionClear_Table = QtWidgets.QAction(batch_iv_analysis)
        self.actionClear_Table.setEnabled(True)
        self.actionClear_Table.setObjectName("actionClear_Table")
        self.actionFsadf = QtWidgets.QAction(batch_iv_analysis)
        self.actionFsadf.setObjectName("actionFsadf")
        self.actionSet_Bounds = QtWidgets.QAction(batch_iv_analysis)
        self.actionSet_Bounds.setObjectName("actionSet_Bounds")
        self.actionWatch = QtWidgets.QAction(batch_iv_analysis)
        self.actionWatch.setObjectName("actionWatch")
        self.actionEnable_Watching = QtWidgets.QAction(batch_iv_analysis)
        self.actionEnable_Watching.setCheckable(True)
        self.actionEnable_Watching.setChecked(False)
        self.actionEnable_Watching.setObjectName("actionEnable_Watching")
        self.actionWatch_2 = QtWidgets.QAction(batch_iv_analysis)
        self.actionWatch_2.setObjectName("actionWatch_2")
        self.actionFit_Constraints = QtWidgets.QAction(batch_iv_analysis)
        self.actionFit_Constraints.setObjectName("actionFit_Constraints")
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionWatch_2)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionQuit)
        self.menuTools.addAction(self.actionClear_Table)
        self.menuTools.addAction(self.actionEnable_Watching)
        self.menuTools.addAction(self.actionFit_Constraints)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuTools.menuAction())

        self.retranslateUi(batch_iv_analysis)
        self.actionQuit.triggered.connect(batch_iv_analysis.close)
        QtCore.QMetaObject.connectSlotsByName(batch_iv_analysis)

    def retranslateUi(self, batch_iv_analysis):
        _translate = QtCore.QCoreApplication.translate
        batch_iv_analysis.setWindowTitle(_translate("batch_iv_analysis", "batch-iv-analysis"))
        self.tableWidget.setSortingEnabled(True)
        self.menuFile.setTitle(_translate("batch_iv_analysis", "File"))
        self.menuTools.setTitle(_translate("batch_iv_analysis", "Tools"))
        self.actionQuit.setText(_translate("batch_iv_analysis", "Quit"))
        self.actionQuit.setShortcut(_translate("batch_iv_analysis", "Ctrl+Q"))
        self.actionOpen.setText(_translate("batch_iv_analysis", "Open"))
        self.actionOpen.setShortcut(_translate("batch_iv_analysis", "Ctrl+O"))
        self.actionSave.setText(_translate("batch_iv_analysis", "Export"))
        self.actionSave.setShortcut(_translate("batch_iv_analysis", "Ctrl+S"))
        self.actionClear_Table.setText(_translate("batch_iv_analysis", "Clear Table"))
        self.actionClear_Table.setShortcut(_translate("batch_iv_analysis", "Ctrl+Backspace"))
        self.actionFsadf.setText(_translate("batch_iv_analysis", "fsadf"))
        self.actionSet_Bounds.setText(_translate("batch_iv_analysis", "Set Bounds"))
        self.actionWatch.setText(_translate("batch_iv_analysis", "Watch"))
        self.actionWatch.setShortcut(_translate("batch_iv_analysis", "Ctrl+W"))
        self.actionEnable_Watching.setText(_translate("batch_iv_analysis", "Enable Watching"))
        self.actionEnable_Watching.setShortcut(_translate("batch_iv_analysis", "Ctrl+E"))
        self.actionWatch_2.setText(_translate("batch_iv_analysis", "Watch"))
        self.actionWatch_2.setShortcut(_translate("batch_iv_analysis", "Ctrl+W"))
        self.actionFit_Constraints.setText(_translate("batch_iv_analysis", "Fit Constraints"))

